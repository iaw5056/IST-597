{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'C:\\\\Users\\\\Laksh Gupta'"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import os\n",
    "os.getcwd()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "df=pd.read_csv('dataset.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>age</th>\n",
       "      <th>city_birth</th>\n",
       "      <th>zip_code</th>\n",
       "      <th>disease</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>55</td>\n",
       "      <td>San Giovanni Del Dosso</td>\n",
       "      <td>25049</td>\n",
       "      <td>Cancer</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>50</td>\n",
       "      <td>Comina (La)</td>\n",
       "      <td>16151</td>\n",
       "      <td>AIDS</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>17</td>\n",
       "      <td>Marina Di Camerota</td>\n",
       "      <td>73015</td>\n",
       "      <td>AIDS</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>8</td>\n",
       "      <td>Tonnarella</td>\n",
       "      <td>19028</td>\n",
       "      <td>Autism</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>40</td>\n",
       "      <td>San Bartolomeo Lanze</td>\n",
       "      <td>58014</td>\n",
       "      <td>Autism</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   id  age              city_birth  zip_code disease\n",
       "0   1   55  San Giovanni Del Dosso     25049  Cancer\n",
       "1   2   50             Comina (La)     16151    AIDS\n",
       "2   3   17      Marina Di Camerota     73015    AIDS\n",
       "3   4    8              Tonnarella     19028  Autism\n",
       "4   5   40    San Bartolomeo Lanze     58014  Autism"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['id', 'age', 'city_birth', 'zip_code', 'disease'], dtype='object')"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([25049, 16151, 73015, 19028, 58014, 13884, 86070, 85020, 87045,\n",
       "       34010, 98074, 27020, 38077, 56017, 41028, 15060, 53030, 39010,\n",
       "       16167,    20, 25019, 39056, 74020, 39028, 86045, 37137, 90049,\n",
       "       39011, 16010,   152, 51100, 56020, 87040,  8030, 16030, 61037,\n",
       "       27023, 21010, 81028, 33100, 71027,  1020, 90040, 17014, 81037,\n",
       "       60044, 82020, 23035, 96010, 38060, 51016, 84052, 30014, 38078,\n",
       "       25061, 88040, 90131, 41036, 33021, 98157, 82030, 39030, 29023,\n",
       "       30030, 26010, 39040,    11,  8013, 62012, 37060, 28841, 26857,\n",
       "       73040, 66034, 88041,  2016, 67013, 40051, 12047,  8012,  1019,\n",
       "       58100, 39023, 38100, 98070, 15050, 87046, 15040, 57032,  9028,\n",
       "        2010, 15010, 41038, 94012, 30126], dtype=int64)"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['zip_code'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "61"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy as np\n",
    "np.random.randint(0,100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0       1\n",
       "1       2\n",
       "2       3\n",
       "3       4\n",
       "4       5\n",
       "     ... \n",
       "95     96\n",
       "96     97\n",
       "97     98\n",
       "98     99\n",
       "99    100\n",
       "Name: id, Length: 100, dtype: int64"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['id']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Anonymising ID"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "E:\\install\\Anaconda3\\lib\\site-packages\\ipykernel_launcher.py:2: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  \n"
     ]
    }
   ],
   "source": [
    "for i in range(1,101):\n",
    "    df['id'][i]=np.random.randint(0,100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0       1\n",
       "1      67\n",
       "2      17\n",
       "3      40\n",
       "4      28\n",
       "       ..\n",
       "96     82\n",
       "97     31\n",
       "98     75\n",
       "99     10\n",
       "100    56\n",
       "Name: id, Length: 101, dtype: int64"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['id']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>age</th>\n",
       "      <th>city_birth</th>\n",
       "      <th>zip_code</th>\n",
       "      <th>disease</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>55</td>\n",
       "      <td>San Giovanni Del Dosso</td>\n",
       "      <td>25049</td>\n",
       "      <td>Cancer</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>67</td>\n",
       "      <td>50</td>\n",
       "      <td>Comina (La)</td>\n",
       "      <td>16151</td>\n",
       "      <td>AIDS</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>17</td>\n",
       "      <td>17</td>\n",
       "      <td>Marina Di Camerota</td>\n",
       "      <td>73015</td>\n",
       "      <td>AIDS</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>40</td>\n",
       "      <td>8</td>\n",
       "      <td>Tonnarella</td>\n",
       "      <td>19028</td>\n",
       "      <td>Autism</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>28</td>\n",
       "      <td>40</td>\n",
       "      <td>San Bartolomeo Lanze</td>\n",
       "      <td>58014</td>\n",
       "      <td>Autism</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>95</td>\n",
       "      <td>51</td>\n",
       "      <td>96</td>\n",
       "      <td>Torriglia</td>\n",
       "      <td>2010</td>\n",
       "      <td>Cancer</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>96</td>\n",
       "      <td>82</td>\n",
       "      <td>34</td>\n",
       "      <td>Abatemarco</td>\n",
       "      <td>15010</td>\n",
       "      <td>Autism</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>97</td>\n",
       "      <td>31</td>\n",
       "      <td>33</td>\n",
       "      <td>Deposito Di Luzzi</td>\n",
       "      <td>41038</td>\n",
       "      <td>Anorexia</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>98</td>\n",
       "      <td>75</td>\n",
       "      <td>11</td>\n",
       "      <td>Montescudo</td>\n",
       "      <td>94012</td>\n",
       "      <td>Heart disease</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>99</td>\n",
       "      <td>10</td>\n",
       "      <td>21</td>\n",
       "      <td>Baio Dora</td>\n",
       "      <td>30126</td>\n",
       "      <td>Autism</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>100 rows × 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    id  age              city_birth  zip_code        disease\n",
       "0    1   55  San Giovanni Del Dosso     25049         Cancer\n",
       "1   67   50             Comina (La)     16151           AIDS\n",
       "2   17   17      Marina Di Camerota     73015           AIDS\n",
       "3   40    8              Tonnarella     19028         Autism\n",
       "4   28   40    San Bartolomeo Lanze     58014         Autism\n",
       "..  ..  ...                     ...       ...            ...\n",
       "95  51   96               Torriglia      2010         Cancer\n",
       "96  82   34              Abatemarco     15010         Autism\n",
       "97  31   33       Deposito Di Luzzi     41038       Anorexia\n",
       "98  75   11              Montescudo     94012  Heart disease\n",
       "99  10   21               Baio Dora     30126         Autism\n",
       "\n",
       "[100 rows x 5 columns]"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Anonymising age"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0     55\n",
       "1     50\n",
       "2     17\n",
       "3      8\n",
       "4     40\n",
       "      ..\n",
       "95    96\n",
       "96    34\n",
       "97    33\n",
       "98    11\n",
       "99    21\n",
       "Name: age, Length: 100, dtype: int64"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['age']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "100"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['age'].count()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "E:\\install\\Anaconda3\\lib\\site-packages\\ipykernel_launcher.py:7: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  import sys\n",
      "E:\\install\\Anaconda3\\lib\\site-packages\\pandas\\core\\indexing.py:205: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  self._setitem_with_indexer(indexer, value)\n",
      "E:\\install\\Anaconda3\\lib\\site-packages\\ipykernel_launcher.py:3: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  This is separate from the ipykernel package so we can avoid doing imports until\n",
      "E:\\install\\Anaconda3\\lib\\site-packages\\ipykernel_launcher.py:5: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  \"\"\"\n",
      "E:\\install\\Anaconda3\\lib\\site-packages\\ipykernel_launcher.py:9: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  if __name__ == '__main__':\n",
      "E:\\install\\Anaconda3\\lib\\site-packages\\ipykernel_launcher.py:11: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  # This is added back by InteractiveShellApp.init_path()\n"
     ]
    }
   ],
   "source": [
    "for i in range(0,df['age'].count()):\n",
    "    if (df['age'][i]>=0 and df['age'][i]<=20):\n",
    "        df['age'][i]=\"0-20\"\n",
    "    elif (df['age'][i]>20 and df['age'][i]<=40):\n",
    "        df['age'][i]=\"21-40\"\n",
    "    elif (df['age'][i]>40 and df['age'][i]<=60):\n",
    "        df['age'][i]=\"41-60\"\n",
    "    elif (df['age'][i]>61 and df['age'][i]<=80):\n",
    "        df['age'][i]=\"61-80\"\n",
    "    else:\n",
    "        df['age'][i]=\">80\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0     41-60\n",
       "1     41-60\n",
       "2      0-20\n",
       "3      0-20\n",
       "4     21-40\n",
       "      ...  \n",
       "95      >80\n",
       "96    21-40\n",
       "97    21-40\n",
       "98     0-20\n",
       "99    21-40\n",
       "Name: age, Length: 100, dtype: object"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['age']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Anonymising city of birth"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['id', 'age', 'city_birth', 'zip_code', 'disease'], dtype='object')"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['San Giovanni Del Dosso', 'Comina (La)', 'Marina Di Camerota',\n",
       "       'Tonnarella', 'San Bartolomeo Lanze', \"Cade'\", 'Corsione', 'Arre',\n",
       "       'San Giovanni', 'Trigolo', 'Selino Basso',\n",
       "       'San Giacomo Delle Segnate', 'Cerreto', 'Bergantino',\n",
       "       \"Barberino Val D'Elsa\", \"Badia Di Cava De' Tirreni\",\n",
       "       'Santa Maria Del Taro', 'Rifreddo', 'Nuraminis', 'Flagogna',\n",
       "       'Rinaggiu', 'Lodrone', 'Banco', 'Biella', 'San Gallo',\n",
       "       'Bacchereto', \"Sant'Angelo Di Cetraro\", 'Montecastelli Pisano',\n",
       "       'Guardamiglio', 'Colognole', \"Sant'Antonino Di Susa\", 'Mandrogne',\n",
       "       'Cassano Spinola', 'San Lorenzo', 'Plawenn', 'Salcito', 'Vannullo',\n",
       "       'Luserna', 'Monticchiello', 'Sala', 'Pedrengo',\n",
       "       'San Cipriano Picentino', 'Pasturo', 'Erchie',\n",
       "       'San Piero In Bagno', 'Catania', 'Morro Reatino',\n",
       "       'Prignano Cilento', 'San Girolamo', 'San Paolo', 'Magliano Nuovo',\n",
       "       'Molini', 'Specchia Tarantina', 'Molteno', 'Pontecagnano Faiano',\n",
       "       'Hafling', 'Serle', 'Gioia Del Colle', 'San Martino In Passiria',\n",
       "       \"Motta Sant'Anastasia\", 'Fabro Scalo', 'Larciano', 'San Pancrazio',\n",
       "       'Sutri', 'Monterotondo Marittimo', 'Vische', 'Verdins',\n",
       "       'Poderi Di Montemerano', 'Pastorano', 'Villaggi', 'Viola',\n",
       "       'Ponzano Veneto', 'Prata', 'Calbola', 'San Pietro Sovera',\n",
       "       'Bertinoro', 'Premia', 'Trescine', 'Montegridolfo', 'Roccaverano',\n",
       "       'Casanova', 'Sesto San Giovanni', 'Parabiago', 'Isola Maggiore',\n",
       "       'Pedemonte', 'Arcade', 'Matine', 'Lido Di Venezia',\n",
       "       'Andorno Micca', 'Kurtatsch', 'Robecco Sul Naviglio', 'Bussero',\n",
       "       'Seghe Di Velo', 'Cascina Costa', 'Agropoli Stazione', 'Torriglia',\n",
       "       'Abatemarco', 'Deposito Di Luzzi', 'Montescudo', 'Baio Dora'],\n",
       "      dtype=object)"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['city_birth'].unique()"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "Since All Cities are unique, We need to generalise them to the country"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['id', 'age', 'city_birth', 'zip_code', 'disease'], dtype='object')"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "df['city_birth']='Italy'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0     Italy\n",
       "1     Italy\n",
       "2     Italy\n",
       "3     Italy\n",
       "4     Italy\n",
       "      ...  \n",
       "95    Italy\n",
       "96    Italy\n",
       "97    Italy\n",
       "98    Italy\n",
       "99    Italy\n",
       "Name: city_birth, Length: 100, dtype: object"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['city_birth']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Zip Code"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['id', 'age', 'city_birth', 'zip_code', 'disease'], dtype='object')"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "x=df['zip_code'][0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "x=str(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'250'"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x[0:3]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "E:\\install\\Anaconda3\\lib\\site-packages\\ipykernel_launcher.py:4: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  after removing the cwd from sys.path.\n"
     ]
    }
   ],
   "source": [
    "for i in range(0,df['zip_code'].count()):\n",
    "    x=str(df['zip_code'][i])\n",
    "    x=x[0:3]+\"**\"\n",
    "    df['zip_code'][i]=x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0     250**\n",
       "1     161**\n",
       "2     730**\n",
       "3     190**\n",
       "4     580**\n",
       "      ...  \n",
       "95    201**\n",
       "96    150**\n",
       "97    410**\n",
       "98    940**\n",
       "99    301**\n",
       "Name: zip_code, Length: 100, dtype: object"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['zip_code']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Here, we are done generalising the basic code sequence."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>age</th>\n",
       "      <th>city_birth</th>\n",
       "      <th>zip_code</th>\n",
       "      <th>disease</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>41-60</td>\n",
       "      <td>Italy</td>\n",
       "      <td>250**</td>\n",
       "      <td>Cancer</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>67</td>\n",
       "      <td>41-60</td>\n",
       "      <td>Italy</td>\n",
       "      <td>161**</td>\n",
       "      <td>AIDS</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>17</td>\n",
       "      <td>0-20</td>\n",
       "      <td>Italy</td>\n",
       "      <td>730**</td>\n",
       "      <td>AIDS</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>40</td>\n",
       "      <td>0-20</td>\n",
       "      <td>Italy</td>\n",
       "      <td>190**</td>\n",
       "      <td>Autism</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>28</td>\n",
       "      <td>21-40</td>\n",
       "      <td>Italy</td>\n",
       "      <td>580**</td>\n",
       "      <td>Autism</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>95</td>\n",
       "      <td>51</td>\n",
       "      <td>&gt;80</td>\n",
       "      <td>Italy</td>\n",
       "      <td>201**</td>\n",
       "      <td>Cancer</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>96</td>\n",
       "      <td>82</td>\n",
       "      <td>21-40</td>\n",
       "      <td>Italy</td>\n",
       "      <td>150**</td>\n",
       "      <td>Autism</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>97</td>\n",
       "      <td>31</td>\n",
       "      <td>21-40</td>\n",
       "      <td>Italy</td>\n",
       "      <td>410**</td>\n",
       "      <td>Anorexia</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>98</td>\n",
       "      <td>75</td>\n",
       "      <td>0-20</td>\n",
       "      <td>Italy</td>\n",
       "      <td>940**</td>\n",
       "      <td>Heart disease</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>99</td>\n",
       "      <td>10</td>\n",
       "      <td>21-40</td>\n",
       "      <td>Italy</td>\n",
       "      <td>301**</td>\n",
       "      <td>Autism</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>100 rows × 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    id    age city_birth zip_code        disease\n",
       "0    1  41-60      Italy    250**         Cancer\n",
       "1   67  41-60      Italy    161**           AIDS\n",
       "2   17   0-20      Italy    730**           AIDS\n",
       "3   40   0-20      Italy    190**         Autism\n",
       "4   28  21-40      Italy    580**         Autism\n",
       "..  ..    ...        ...      ...            ...\n",
       "95  51    >80      Italy    201**         Cancer\n",
       "96  82  21-40      Italy    150**         Autism\n",
       "97  31  21-40      Italy    410**       Anorexia\n",
       "98  75   0-20      Italy    940**  Heart disease\n",
       "99  10  21-40      Italy    301**         Autism\n",
       "\n",
       "[100 rows x 5 columns]"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now, we need to get on with the basic datafly algorithm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter the level of A\n",
      "0.5\n"
     ]
    }
   ],
   "source": [
    "print(\"Enter the level of A\")\n",
    "a=float(input())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter User-Specified r1\n",
      "1\n"
     ]
    }
   ],
   "source": [
    "print(\"Enter User-Specified r1\")\n",
    "r1=float(input())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [],
   "source": [
    "import math\n",
    "if (r1==0):\n",
    "    res=math.pow(10,-1*(2-2))\n",
    "    r2=res*df['age'].count()\n",
    "else:\n",
    "    r2=math.sqrt(df['age'].count())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "10.0"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "r2"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Bin Size"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [],
   "source": [
    "b=(r2-r1)*a+r1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "5.5"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Linking Likelihood"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "We want to know where do you want to use this dataset for:\n",
      "Press 1 for Public Use, 2 for Researchers, 3 for Patient or Public Use\n",
      "2\n"
     ]
    }
   ],
   "source": [
    "print(\"We want to know where do you want to use this dataset for:\")\n",
    "print(\"Press 1 for Public Use, 2 for Researchers, 3 for Patient or Public Use\")\n",
    "ch=int(input())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [],
   "source": [
    "if (ch==1):\n",
    "    pf=1\n",
    "elif (ch==2):\n",
    "    pf=0.5\n",
    "else:\n",
    "    pf=0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.5"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pf"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Bin Size per field"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [],
   "source": [
    "bf=b+(r2-r1)*pf+r1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "11.0"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "5"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.count_nonzero(df.columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [],
   "source": [
    "binsize=[]\n",
    "bf_a=[]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "For attribute id\n",
      "Enter the level of A\n",
      "0.5\n",
      "Enter User-Specified r1\n",
      "1\n",
      "We want to know where do you want to use this dataset for:\n",
      "Press 1 for Public Use, 2 for Researchers, 3 for Patient or Public Use\n",
      "2\n",
      "For attribute age\n",
      "Enter the level of A\n",
      "1\n",
      "Enter User-Specified r1\n",
      "2\n",
      "We want to know where do you want to use this dataset for:\n",
      "Press 1 for Public Use, 2 for Researchers, 3 for Patient or Public Use\n",
      "2\n",
      "For attribute city_birth\n",
      "Enter the level of A\n",
      "0.6\n",
      "Enter User-Specified r1\n",
      "2\n",
      "We want to know where do you want to use this dataset for:\n",
      "Press 1 for Public Use, 2 for Researchers, 3 for Patient or Public Use\n",
      "3\n",
      "For attribute zip_code\n",
      "Enter the level of A\n",
      "0.2\n",
      "Enter User-Specified r1\n",
      "2.5\n",
      "We want to know where do you want to use this dataset for:\n",
      "Press 1 for Public Use, 2 for Researchers, 3 for Patient or Public Use\n",
      "1\n",
      "For attribute disease\n",
      "Enter the level of A\n",
      "0.8\n",
      "Enter User-Specified r1\n",
      "2\n",
      "We want to know where do you want to use this dataset for:\n",
      "Press 1 for Public Use, 2 for Researchers, 3 for Patient or Public Use\n",
      "2\n"
     ]
    }
   ],
   "source": [
    "print(\"Enter the level of A\")\n",
    "a=float(input())\n",
    "print(\"Enter User-Specified r1\")\n",
    "r1=float(input())\n",
    "import math\n",
    "if (r1==0):\n",
    "    res=math.pow(10,-1*(2-2))\n",
    "    r2=res*df['age'].count()\n",
    "else:\n",
    "    r2=math.sqrt(df['age'].count())\n",
    "b=(r2-r1)*a+r1\n",
    "for i in range(0,np.count_nonzero(df.columns)):\n",
    "    print (\"For attribute \"+df.columns[i])\n",
    "    print(\"We want to know where do you want to use this dataset for:\")\n",
    "    print(\"Press 1 for Public Use, 2 for Researchers, 3 for Patient or Public Use\")\n",
    "    ch=int(input())\n",
    "    if (ch==1):\n",
    "        pf=1\n",
    "    elif (ch==2):\n",
    "        pf=0.5\n",
    "    else:\n",
    "        pf=0\n",
    "    bf=b+(r2-r1)*pf+r1\n",
    "    binsize.append(bf)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[11.0, 16.0, 8.8, 14.0, 14.4]"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "binsize"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [],
   "source": [
    "total=np.count_nonzero(binsize)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [],
   "source": [
    "n=df.count()[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [],
   "source": [
    "loss=0.1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {},
   "outputs": [],
   "source": [
    "sum=0.0\n",
    "for j in range(0,total):\n",
    "    if (binsize[j]<b and sum>loss*n):\n",
    "        sum=sum+binsize[j]\n",
    "    else:\n",
    "        break\n",
    "    if (sum==n):\n",
    "        df[j]='*****'\n",
    "    else:\n",
    "        if (j==0):\n",
    "            for i in range(1,101):\n",
    "                df['id'][i]=np.random.randint(0,100)\n",
    "        elif (j==1):\n",
    "            for i in range(0,df['age'].count()):\n",
    "                if (df['age'][i]>=0 and df['age'][i]<=20):\n",
    "                    df['age'][i]=\"0-20\"\n",
    "                elif (df['age'][i]>20 and df['age'][i]<=40):\n",
    "                    df['age'][i]=\"21-40\"\n",
    "                elif (df['age'][i]>40 and df['age'][i]<=60):\n",
    "                    df['age'][i]=\"41-60\"\n",
    "                elif (df['age'][i]>61 and df['age'][i]<=80):\n",
    "                    df['age'][i]=\"61-80\"\n",
    "                else:\n",
    "                    df['age'][i]=\">80\"\n",
    "        elif (j==2):\n",
    "            df['city_birth']='Italy'\n",
    "        elif (j==3):\n",
    "            for i in range(0,df['zip_code'].count()):\n",
    "                x=str(df['zip_code'][i])\n",
    "                x=x[0:3]+\"**\"\n",
    "                df['zip_code'][i]=x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>age</th>\n",
       "      <th>city_birth</th>\n",
       "      <th>zip_code</th>\n",
       "      <th>disease</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>41-60</td>\n",
       "      <td>Italy</td>\n",
       "      <td>250**</td>\n",
       "      <td>Cancer</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>67</td>\n",
       "      <td>41-60</td>\n",
       "      <td>Italy</td>\n",
       "      <td>161**</td>\n",
       "      <td>AIDS</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>17</td>\n",
       "      <td>0-20</td>\n",
       "      <td>Italy</td>\n",
       "      <td>730**</td>\n",
       "      <td>AIDS</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>40</td>\n",
       "      <td>0-20</td>\n",
       "      <td>Italy</td>\n",
       "      <td>190**</td>\n",
       "      <td>Autism</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>28</td>\n",
       "      <td>21-40</td>\n",
       "      <td>Italy</td>\n",
       "      <td>580**</td>\n",
       "      <td>Autism</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>95</td>\n",
       "      <td>51</td>\n",
       "      <td>&gt;80</td>\n",
       "      <td>Italy</td>\n",
       "      <td>201**</td>\n",
       "      <td>Cancer</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>96</td>\n",
       "      <td>82</td>\n",
       "      <td>21-40</td>\n",
       "      <td>Italy</td>\n",
       "      <td>150**</td>\n",
       "      <td>Autism</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>97</td>\n",
       "      <td>31</td>\n",
       "      <td>21-40</td>\n",
       "      <td>Italy</td>\n",
       "      <td>410**</td>\n",
       "      <td>Anorexia</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>98</td>\n",
       "      <td>75</td>\n",
       "      <td>0-20</td>\n",
       "      <td>Italy</td>\n",
       "      <td>940**</td>\n",
       "      <td>Heart disease</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>99</td>\n",
       "      <td>10</td>\n",
       "      <td>21-40</td>\n",
       "      <td>Italy</td>\n",
       "      <td>301**</td>\n",
       "      <td>Autism</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>100 rows × 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    id    age city_birth zip_code        disease\n",
       "0    1  41-60      Italy    250**         Cancer\n",
       "1   67  41-60      Italy    161**           AIDS\n",
       "2   17   0-20      Italy    730**           AIDS\n",
       "3   40   0-20      Italy    190**         Autism\n",
       "4   28  21-40      Italy    580**         Autism\n",
       "..  ..    ...        ...      ...            ...\n",
       "95  51    >80      Italy    201**         Cancer\n",
       "96  82  21-40      Italy    150**         Autism\n",
       "97  31  21-40      Italy    410**       Anorexia\n",
       "98  75   0-20      Italy    940**  Heart disease\n",
       "99  10  21-40      Italy    301**         Autism\n",
       "\n",
       "[100 rows x 5 columns]"
      ]
     },
     "execution_count": 88,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "metadata": {},
   "outputs": [],
   "source": [
    "df.to_csv('anonymised.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
